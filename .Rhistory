gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
g_new_class = new_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
## measure = X0_gs_adjusted[i,2]
measure <- -log10(gene$p.Decay)
#> print(measure)
## If the gene is an old module
#>    then we add its affect to neighboring (d<r) nodes
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
if (j == i){
next
}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
## If not old module:
#>    check if it is a new module,
#>        if yes put 1 in the vector
else{
if (g_new_class == "M"){
new_module[i] = 1
}
}
}
## We have 69 new modules - validate this
## Ghadi: 72 with k = 2, 69 with k = 3
sum(new_module==1)
## How many modules are in new but are not in old
sum(class_res_old$gene_class[,2]=="M")
sum(class_res_new$gene_class[,2]=="M")
## Get Module Genes in our method: GS + mND
new_mdg = rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
## Get Module Genes in 1st method: Only mND
old_mdg = rownames(class_res_old$gene_class)[class_res_old$gene_class[,2] == "M"]
#> Count Common Module Genes in our Method
sum(new_mdg %in% old_mdg)
#> Count Unique Module Genes in both Method
## 32 (k=2) modules discarded by GS
sum(!(old_mdg %in% new_mdg))
## Ghadi: 72 with k = 2, 69 k = 3
sum(!(new_mdg %in% old_mdg))
## Get names of unique genes (distinct module genes: mdg)
distinct_mdg = new_mdg[which(!(new_mdg %in% old_mdg))]
discarded_mdg <- new_mdg[which(!(old_mdg %in% new_mdg))]
## Get Indices of unique genes
dmdg_indices = which(rownames(X0_gs_adjusted)%in%distinct_mdg)
discarded_mdg_indices <- which(rownames(X0_gs_adjusted)%in%discarded_mdg)
## Mean Results of Decay Score in 1st method vs our method
mean(results_c_decay_score[dmdg_indices])
mean(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])
mean(results_c_decay_score[discarded_mdg_indices])
mean(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%discarded_mdg))])
## Distinct Density Plots
ggplot(as.data.frame(as.matrix(results_c_decay_score[dmdg_indices])), aes(V1)) + geom_density()
ggplot(as.data.frame(as.matrix(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])), aes(V1)) + geom_density()
## Overlaying the Density Plots
#> Distinct
a = data.frame(cumulative_decay_score = results_c_decay_score[dmdg_indices])
b = data.frame(y = results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])
ggplot() +
geom_density(data = a, aes(x = cumulative_decay_score),
fill = "#DAF7A6", color = "black", alpha = 0.7) +
geom_density(data = b, aes(x = y),
fill = "#C70039", color = "black", alpha = 0.7)
#> Discarded
x = data.frame(cumulative_decay_score = results_c_decay_score[discarded_mdg_indices])
y = data.frame(y = results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%discarded_mdg))])
ggplot() +
geom_density(data = x, aes(x = cumulative_decay_score),
fill = "#DAF7A6", color = "black", alpha = 0.7) +
geom_density(data = y, aes(x = y),
fill = "#C70039", color = "black", alpha = 0.7)
vector1 <- results_c_decay_score[dmdg_indices]
vector2 <- results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))]
var.test(x = vector1, y = vector2, ratio = 1, alternative = c("two.sided", "less", "greater"), conf.level = 0.95)
t.test(x = vector1, y = vector2, alternative = "two.sided", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95)
vector3 <- results_c_decay_score[discarded_mdg_indices]
vector4 <- results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%discarded_mdg))]
## Comparing Variances:
var.test(x = vector3, y = vector4, ratio = 1, alternative = c("two.sided", "less", "greater"), conf.level = 0.95)
## Comparing Means:
t.test(x = vector3, y = vector4, alternative = "two.sided", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95)
## ----------------------------------------------------------------------------
## Sanity Re-check:
sum(class_res_new$gene_class[,1] != class_res_old$gene_class[,1])
shift_sm <- table(mND = class_res_old$gene_class[,1], GS_adjusted_mND = class_res_new$gene_class[,1])
shift_ge <- table(mND = class_res_old$gene_class[,2], GS_adjusted_mND = class_res_new$gene_class[,2])
# Percentages over mND genes
results_ge_mND <- shift_ge
for(i in 1:nrow(shift_ge)){
results_ge_mND[i,] <- (shift_ge[i,]/sum(shift_ge[i,]))*100
}
results_ge_mND
# Total selected mND genes (I, L, M)
11796 - sum(shift_ge[4,])
# Percentages over GS_adjusted genes
results_ge_GS_adjusted <- shift_ge
for(i in 1:ncol(shift_ge)){
results_ge_GS_adjusted[,i] <- (shift_ge[,i]/sum(shift_ge[,i]))*100
}
results_ge_GS_adjusted
# Total selected GS-adjusted mND genes (I, L, M) --> -205 genes
11796 - sum(shift_ge[,4])
11796 - sum(shift_ge[,4]) - (11796 - sum(shift_ge[4,]))
# Percent over all genes
(shift_ge/11796)*100
## Getting Disease-related genes with AutoSeed
## (includes eDGAR, DrugBank, and MalaCards)
library(Autoseed)
bc_genes_search <- AutoSeed("breast cancer")
bc_genes_search2 <- AutoSeed("breast carcinoma")
bc_genes <- Reduce(union, c(bc_genes_search$edgar,bc_genes_search$malacards,
bc_genes_search$drugbank,
bc_genes_search2$edgar,bc_genes_search2$malacards,
bc_genes_search2$drugbank))
bc_genes_clean <- unique(vapply(bc_genes, function(x){
return(unlist(strsplit(x, split='::', fixed=TRUE))[1])},
c("x")))
## Getting Disease-related genes with AutoSeed
## (includes eDGAR, DrugBank, and MalaCards)
library(Autoseed)
## Getting Disease-related genes with AutoSeed
## (includes eDGAR, DrugBank, and MalaCards)
install.packages("Autoseed")
bc_genes_search <- AutoSeed("breast cancer")
## Getting Disease-related genes with AutoSeed
## (includes eDGAR, DrugBank, and MalaCards)
## install.packages("Autoseed")
library(Autoseed)
bc_genes_search <- AutoSeed("breast cancer")
bc_genes_search2 <- AutoSeed("breast carcinoma")
bc_genes <- Reduce(union, c(bc_genes_search$edgar,bc_genes_search$malacards,
bc_genes_search$drugbank,
bc_genes_search2$edgar,bc_genes_search2$malacards,
bc_genes_search2$drugbank))
bc_genes_clean <- unique(vapply(bc_genes, function(x){
return(unlist(strsplit(x, split='::', fixed=TRUE))[1])},
c("x")))
bc_genes_clean <- bc_genes_clean[bc_genes_clean%in%rownames(X0)]
# Matched distinct genes
sum(distinct_mdg %in% bc_genes_clean)
# Matched discarded genes
sum(discarded_mdg %in% bc_genes_clean)
# Matched old M genes
sum(old_mdg %in% bc_genes_clean)
# Matched new M genes
sum(new_mdg %in% bc_genes_clean)
genes_selected_old <- rownames(class_res_old$gene_class %>% filter(L2 != "NS"))
genes_selected_new <- rownames(class_res_new$gene_class %>% filter(L2 != "NS"))
# Matched selected old
sum(genes_selected_old %in% bc_genes_clean)/length(bc_genes_clean)*100
# Matched selected new
sum(genes_selected_new %in% bc_genes_clean)/length(bc_genes_clean)*100
# Analyzing coverage by mNDp cutoffs
cutoffs <- seq(0.0001, 0.06, 0.0001)
genes_selected_cutoffs <- data.frame(mNDp_cutoffs = 1:length(cutoffs),
old = 1:length(cutoffs),
new = 1:length(cutoffs),
new_k2 = 1:length(cutoffs))
for(i in 1:length(cutoffs)){
# %>% filter(L2 != "NS"))
genes_cutoff_old <- rownames(mND_score$mND %>% filter(mNDp <= cutoffs[i]))
# %>% filter(L2 != "NS"))
genes_cutoff_new <- rownames(mND_score_new$mND %>% filter(mNDp <= cutoffs[i]))
genes_cutoff_new_k2 <- rownames(mND_score_new_k2$mND %>% filter(mNDp <= cutoffs[i]))
print(paste("Cutoff:", i))
# Matched selected by mNDp cutoff old
old <- sum(genes_cutoff_old %in% bc_genes_clean)/length(bc_genes_clean)*100
print("Old")
print(old)
# Matched selected by mNDp cutoff new
new <- sum(genes_cutoff_new %in% bc_genes_clean)/length(bc_genes_clean)*100
print("New (k = 3)")
print(new)
# Matched selected by mNDp cutoff new k = 2
new_k2 <- sum(genes_cutoff_new_k2 %in% bc_genes_clean)/length(bc_genes_clean)*100
print("New (k = 2)")
print(new_k2)
genes_selected_cutoffs[i,] <- c(cutoffs[i], old, new, new_k2)
}
mND_score_new_k2 <- readRDS("Data/mND_gs_adjusted_scores_k2.rds")
for(i in 1:length(cutoffs)){
# %>% filter(L2 != "NS"))
genes_cutoff_old <- rownames(mND_score$mND %>% filter(mNDp <= cutoffs[i]))
# %>% filter(L2 != "NS"))
genes_cutoff_new <- rownames(mND_score_new$mND %>% filter(mNDp <= cutoffs[i]))
genes_cutoff_new_k2 <- rownames(mND_score_new_k2$mND %>% filter(mNDp <= cutoffs[i]))
print(paste("Cutoff:", i))
# Matched selected by mNDp cutoff old
old <- sum(genes_cutoff_old %in% bc_genes_clean)/length(bc_genes_clean)*100
print("Old")
print(old)
# Matched selected by mNDp cutoff new
new <- sum(genes_cutoff_new %in% bc_genes_clean)/length(bc_genes_clean)*100
print("New (k = 3)")
print(new)
# Matched selected by mNDp cutoff new k = 2
new_k2 <- sum(genes_cutoff_new_k2 %in% bc_genes_clean)/length(bc_genes_clean)*100
print("New (k = 2)")
print(new_k2)
genes_selected_cutoffs[i,] <- c(cutoffs[i], old, new, new_k2)
}
# Interesting how we get more coverage no matter the cutoff although converges
# slightly at xtrmly low cutoffs. k = 2 shows slightly less coverage but at lower
# cutoffs coverage is almost the same (seems that lower k prioritizes important genes)
ggplot() +
geom_line(data = genes_selected_cutoffs, aes(cutoffs, old), color = "black") +
geom_line(data = genes_selected_cutoffs, aes(cutoffs, new), color = "red") +
geom_line(data = genes_selected_cutoffs, aes(cutoffs, new_k2), color = "blue", alpha = 0.5) +
ylab("Cumulative Coverage (%)") +
xlab("mNDp Cutoff") +
ggtitle("Cumulative Coverage of disease-related genes by mNDp cutoffs",
subtitle = "mND (k = 3) in black, GS-adjusted mND (k = 2) in blue, GS-adjusted mND (k = 3) in red")
require(KEGGREST)
install.packages("KEGGREST")
install.packages("KEGGREST")
BiocManager::install("KEGGREST")
BiocManager::install("KEGGREST")
library(KEGGREST)
pathways.list <- keggList("pathway", "hsa") #Needs Internet connection
pathway.codes <- sub("path:", "", names(pathways.list))
genes.by.pathway <- sapply(pathway.codes,
function(pwid){
pw <- keggGet(pwid)
if (is.null(pw[[1]]$GENE)) return(NA)
pw2 <- pw[[1]]$GENE[c(FALSE,TRUE)] # may need to modify this to c(FALSE, TRUE) for other organisms
pw2 <- unlist(lapply(strsplit(pw2, split = ";", fixed = T), function(x)x[1]))
return(pw2)
}
)
#saveRDS(genes.by.pathway, "Data/genes.by.pathway.rds")
genes.by.pathway <- readRDS("Data/genes.by.pathway.rds")
#saveRDS(genes.by.pathway, "Data/genes.by.pathway.rds")
genes.by.pathway <- readRDS("Data/genes.by.pathway.rds")
enrich <- function(mND_score, pathways.list, pathway.codes, genes.by.pathway)
{
geneList <- mND_score$mND$mNDp
names(geneList) <- rownames(mND_score$mND)
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway)))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[paste("path:",outdat$pathway.code, sep = "")]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
return(outdat[order(outdat$p.value),])
}
enrichment_old <- enrich(mND_score, pathways.list, pathway.codes, genes.by.pathway)
enrichment_new <- enrich(mND_score_new, pathways.list, pathway.codes, genes.by.pathway)
# Write and Load Codes
#write.csv(enrichment_old, "Results/Enrichment/enrichment_old.csv")
enrichment_old <- read.csv("Results/Enrichment/enrichment_old.csv")
#write.csv(enrichment_new, "Results/Enrichment/enrichment_new.csv")
enrichment_new <- read.csv("Results/Enrichment/enrichment_new.csv")
comparative_enrich <- function(X0, mND_scores = list(), pathways.list, pathway.codes, genes.by.pathway){
result <- list()
for(i in 1:length(genes.by.pathway)){
pathway_result <- data.frame(matrix(nrow = length(seq (50, 500, 1)),
ncol = length(mND_scores)+2))
colnames(pathway_result) <- append(names(mND_scores), c("DE_scores","cutoff"))
count <- 0
for(mND_score in mND_scores){
count <- count + 1
count2 <- 0
genes <- mND_score$mND %>% arrange(desc(mND))
control_genes <- sort(X0[,2], decreasing = TRUE)
for(cutoff in seq (50, 500, 1)){
count2 <- count2 + 1
pathway_result[count2,count] <- sum(rownames(genes[1:cutoff,]) %in% genes.by.pathway[[i]])/length(genes.by.pathway[[i]])*100
pathway_result[count2,ncol(pathway_result)] <- cutoff
if(count == 1){
pathway_result[count2,ncol(pathway_result)-1] <- sum(names(control_genes[1:cutoff]) %in% genes.by.pathway[[i]])/length(genes.by.pathway[[i]])*100
}
}
}
result[[pathways.list[[i]]]] <- pathway_result
}
return(result)
}
comparative_enrichment <- comparative_enrich(X0, list(mND_old_k3 = mND_score, mND_new_k3 = mND_score_new, mND_new_k2 = mND_score_new_k2), pathways.list, pathway.codes, genes.by.pathway)
comparative_enrich <- function(X0, mND_scores = list(), pathways.list, pathway.codes, genes.by.pathway){
result <- list()
for(i in 1:length(genes.by.pathway)){
pathway_result <- data.frame(matrix(nrow = length(seq (50, 500, 1)),
ncol = length(mND_scores)+2))
colnames(pathway_result) <- append(names(mND_scores), c("DE_scores","cutoff"))
count <- 0
for(mND_score in mND_scores){
count <- count + 1
count2 <- 0
genes <- mND_score$mND %>% arrange(desc(mND))
control_genes <- sort(X0[,2], decreasing = TRUE)
for(cutoff in seq (50, 500, 1)){
count2 <- count2 + 1
pathway_result[count2,count] <- sum(rownames(genes[1:cutoff,]) %in% genes.by.pathway[[i]])/length(genes.by.pathway[[i]])*100
pathway_result[count2,ncol(pathway_result)] <- cutoff
if(count == 1){
pathway_result[count2,ncol(pathway_result)-1] <- sum(names(control_genes[1:cutoff]) %in% genes.by.pathway[[i]])/length(genes.by.pathway[[i]])*100
}
}
}
result[[pathways.list[[i]]]] <- pathway_result
}
return(result)
}
comparative_enrichment <- comparative_enrich(X0, list(mND_old_k3 = mND_score,
mND_new_k3 = mND_score_new,
mND_new_k2 = mND_score_new_k2),
pathways.list, pathway.codes, genes.by.pathway)
bc_pathways <- c("Breast cancer - Homo sapiens (human)",
"Epstein-Barr virus infection - Homo sapiens (human)",
"Pathways in cancer - Homo sapiens (human)",
"Viral carcinogenesis - Homo sapiens (human)")
other_pathways <- c("Cell cycle - Homo sapiens (human)",
"FoxO signaling pathway - Homo sapiens (human)",
"Hippo signaling pathway - Homo sapiens (human)",
"Oocyte meiosis - Homo sapiens (human)",
"p53 signaling pathway - Homo sapiens (human)",
"PI3K-Akt signaling pathway - Homo sapiens (human)",
"Progesterone-mediated oocyte maturation - Homo sapiens (human)",
"Proteasome - Homo sapiens (human)",
"Rap1 signaling pathway - Homo sapiens (human)",
"Ras signaling pathway - Homo sapiens (human)",
"Sphingolipid signaling pathway - Homo sapiens (human)",
"TGF-beta signaling pathway - Homo sapiens (human)")
for(pathway in append(bc_pathways, other_pathways)){
plot <- ggplot(data = comparative_enrichment[[pathway]]) +
geom_line(aes(cutoff, mND_old_k3), color = "black") +
geom_line(aes(cutoff, mND_new_k3), color = "red") +
geom_line(aes(cutoff, mND_new_k2), color = "blue") +
geom_line(aes(cutoff, DE_scores), color = "magenta") +
ylab("Cumulative Coverage (%)") +
xlab("Cutoff of sorted gene list") +
ggtitle(pathway)
#subtitle = "Black: mND (k = 3), Blue: GS-adjusted mND (k = 2),
#Red: GS-adjusted mND (k = 3), Magenta: original DE scores")
print(plot)
}
assess_connectivity <- function(A, mND_score, n){
objective <- function(S1, A){
return(t(as.matrix(S1))%*%as.matrix(A)%*%as.matrix(S1))
}
permute_A <- function(A, n){
result <- list()
for(i in 1:n){
permuted_A <- A[sample(nrow(A)),]
rownames(permuted_A) <- rownames(A)
result[[i]] <- permuted_A
}
return(result)
}
print("Permuting Vertices...")
permuted_As <- permute_A(A, n)
genes <- mND_score %>% arrange(desc(mND))
results <- data.frame(matrix(ncol = 3, nrow = length(5:nrow(mND_score))))
colnames(results) <- c("cutoff", "omega", "p_omega")
count <- 0
for(cutoff in 5:nrow(mND_score)){
print(paste("Cutoff:", cutoff))
count <- count + 1
results[count,1] <- cutoff
top_genes <- rownames(genes[1:cutoff,])
sub_A <- A[rownames(A) %in% top_genes, colnames(A) %in% top_genes]
print("Calculating Observed Omega...")
observed_omega <- objective(genes[1:cutoff,]$mND, sub_A)
results[count,2] <- observed_omega
print("Calculating Permutated Omegas...")
null_omega <- vector()
for(i in 1:length(permuted_As)){
sub_permuted_A <- permuted_As[[i]][rownames(permuted_As[[i]]) %in% top_genes, colnames(permuted_As[[i]]) %in% top_genes]
null_omega[i] <- objective(genes[1:cutoff,]$mND, sub_permuted_A)
}
print("Assessing Significance...")
p_omega <- sum(as.vector(null_omega) >= as.vector(observed_omega))/length(null_omega)
results[count,3] <- p_omega
print(paste("Done with cutoff", cutoff))
}
return(results)
print("Success!")
}
ordered_scores_old <- (mND_score$mND %>% arrange(desc(mND)))[1:1000,]
sub_A_old <- A[rownames(A) %in% rownames(ordered_scores_old), colnames(A) %in% rownames(ordered_scores_old)]
connectivity_old <- assess_connectivity(sub_A_old, ordered_scores_old, 300)
#write.csv(connectivity_old, "Results/Connectivity/connectivity_old.csv")
conenctivity_old <- read.csv("Results/Connectivity/connectivity_old.csv")
#write.csv(connectivity_new, "Results/Connectivity/connectivity_new.csv")
conenctivity_new <- read.csv("Results/Connectivity/connectivity_new.csv")
ordered_scores_new_k2 <- (mND_score_new_k2$mND %>% arrange(desc(mND)))[1:1000,]
sub_A_new_k2 <- A[rownames(A) %in% rownames(ordered_scores_new_k2), colnames(A) %in% rownames(ordered_scores_new_k2)]
connectivity_new_k2 <- assess_connectivity(sub_A_new_k2, ordered_scores_new_k2, 300)
#write.csv(connectivity_new_k2, "Results/Connectivity/connectivity_new_k2.csv")
conenctivity_new_k2 <- read.csv("Results/Connectivity/connectivity_new_k2.csv")
ordered_scores_control <- (as.data.frame(X0) %>% mutate(mND = L2) %>% arrange(desc(mND)))[1:1000,]
sub_A_control <- A[rownames(A) %in% rownames(ordered_scores_control), colnames(A) %in% rownames(ordered_scores_control)]
#write.csv(connectivity_control, "Results/Connectivity/connectivity_control.csv")
conenctivity_control <- read.csv("Results/Connectivity/connectivity_control.csv")
ggplot() +
geom_line(data = connectivity_old[1:150,], aes(cutoff, p_omega), color = "black") +
geom_line(data = connectivity_new[1:150,], aes(cutoff, p_omega), color = "red") +
geom_line(data = connectivity_new_k2[1:150,], aes(cutoff, p_omega), color = "blue") +
geom_line(data = connectivity_control[1:150,], aes(cutoff, p_omega), color = "magenta") +
ylab("Omega p-value") +
xlab("Cutoff of sorted gene list") +
ggtitle("Significance of enriched connectivity across cutoffs of sorted gene list",
subtitle = "Black: mND (k=3), Blue,Red: GS-adjusted mND (k=2,3), Magenta: original DE scores")
#write.csv(connectivity_old, "Results/Connectivity/connectivity_old.csv")
conenctivity_old <- read.csv("Results/Connectivity/connectivity_old.csv")
ggplot() +
geom_line(data = connectivity_old[1:150,], aes(cutoff, p_omega), color = "black") +
geom_line(data = connectivity_new[1:150,], aes(cutoff, p_omega), color = "red") +
geom_line(data = connectivity_new_k2[1:150,], aes(cutoff, p_omega), color = "blue") +
geom_line(data = connectivity_control[1:150,], aes(cutoff, p_omega), color = "magenta") +
ylab("Omega p-value") +
xlab("Cutoff of sorted gene list") +
ggtitle("Significance of enriched connectivity across cutoffs of sorted gene list",
subtitle = "Black: mND (k=3), Blue,Red: GS-adjusted mND (k=2,3), Magenta: original DE scores")
#write.csv(connectivity_old, "Results/Connectivity/connectivity_old.csv")
connectivity_old <- read.csv("Results/Connectivity/connectivity_old.csv")
ggplot() +
geom_line(data = connectivity_old[1:150,], aes(cutoff, p_omega), color = "black") +
geom_line(data = connectivity_new[1:150,], aes(cutoff, p_omega), color = "red") +
geom_line(data = connectivity_new_k2[1:150,], aes(cutoff, p_omega), color = "blue") +
geom_line(data = connectivity_control[1:150,], aes(cutoff, p_omega), color = "magenta") +
ylab("Omega p-value") +
xlab("Cutoff of sorted gene list") +
ggtitle("Significance of enriched connectivity across cutoffs of sorted gene list",
subtitle = "Black: mND (k=3), Blue,Red: GS-adjusted mND (k=2,3), Magenta: original DE scores")
#write.csv(connectivity_new, "Results/Connectivity/connectivity_new.csv")
connectivity_new <- read.csv("Results/Connectivity/connectivity_new.csv")
#write.csv(connectivity_new_k2, "Results/Connectivity/connectivity_new_k2.csv")
connectivity_new_k2 <- read.csv("Results/Connectivity/connectivity_new_k2.csv")
#write.csv(connectivity_control, "Results/Connectivity/connectivity_control.csv")
connectivity_control <- read.csv("Results/Connectivity/connectivity_control.csv")
ggplot() +
geom_line(data = connectivity_old[1:150,], aes(cutoff, p_omega), color = "black") +
geom_line(data = connectivity_new[1:150,], aes(cutoff, p_omega), color = "red") +
geom_line(data = connectivity_new_k2[1:150,], aes(cutoff, p_omega), color = "blue") +
geom_line(data = connectivity_control[1:150,], aes(cutoff, p_omega), color = "magenta") +
ylab("Omega p-value") +
xlab("Cutoff of sorted gene list") +
ggtitle("Significance of enriched connectivity across cutoffs of sorted gene list",
subtitle = "Black: mND (k=3), Blue,Red: GS-adjusted mND (k=2,3), Magenta: original DE scores")
## mND Graph
library(visNetwork)
genes_subset_mND <- class_res_old$gene_class %>% filter(!(L2 %in% c("NS", "I")))
A_subset_mND <- A[rownames(A) %in% rownames(genes_subset_mND),
colnames(A) %in% rownames(genes_subset_mND)]
graph_mND <- graph_from_adjacency_matrix(A_subset_mND) %>%
set_vertex_attr("class", value = genes_subset_mND[,2])
vis_mND <- toVisNetworkData(graph_mND)
visNetwork(nodes = vis_mND$nodes, edges = vis_mND$edges) %>%
visIgraphLayout(layout = "layout_nicely") %>%
visOptions(nodesIdSelection = TRUE, selectedBy = "class") %>%
visNodes(color = vis_mND$nodes$class)
## mND Graph
library(visNetwork)
install.package("visNetwork")
install.packages("visNetwork")
## mND Graph
library(visNetwork)
genes_subset_mND <- class_res_old$gene_class %>% filter(!(L2 %in% c("NS", "I")))
A_subset_mND <- A[rownames(A) %in% rownames(genes_subset_mND),
colnames(A) %in% rownames(genes_subset_mND)]
graph_mND <- graph_from_adjacency_matrix(A_subset_mND) %>%
set_vertex_attr("class", value = genes_subset_mND[,2])
vis_mND <- toVisNetworkData(graph_mND)
visNetwork(nodes = vis_mND$nodes, edges = vis_mND$edges) %>%
visIgraphLayout(layout = "layout_nicely") %>%
visOptions(nodesIdSelection = TRUE, selectedBy = "class") %>%
visNodes(color = vis_mND$nodes$class)
## GS-adjusted mND graph
genes_subset_adjusted_mND <- class_res_new$gene_class %>% filter(!(L2 %in% c("NS", "I")))
A_subset_adjusted_mND <- A[rownames(A) %in% rownames(genes_subset_adjusted_mND),
colnames(A) %in% rownames(genes_subset_adjusted_mND)]
graph_adjusted_mND <- graph_from_adjacency_matrix(A_subset_adjusted_mND) %>%
set_vertex_attr("class", value = genes_subset_adjusted_mND[,2])
vis_adjusted_mND <- toVisNetworkData(graph_adjusted_mND)
visNetwork(nodes = vis_adjusted_mND$nodes, edges = vis_adjusted_mND$edges) %>%
visIgraphLayout(layout = "layout_nicely") %>%
visOptions(nodesIdSelection = TRUE, selectedBy = "class")
View(genes_subset_adjusted_mND)
knitr::opts_chunk$set(echo = TRUE)
library(RCy3)
install.packages("RCy3")
setwd("D:/Desktop/3rd Year/Spring Semester/Computational Biology/Research/Computational-Biology-Final")
