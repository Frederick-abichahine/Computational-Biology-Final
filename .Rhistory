g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
#if (j == i){
#  next
#}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
}
## initialize empty vector
results_c_decay_score = rep(0,nrow(ge_dist))
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
n = nrow(gs_results_all)
extra <- nchar('||100%')
width <- options()$width
step <- round(i / n * (width - extra))
text <- sprintf('|%s%s|% 3s%%', strrep('=', step),
strrep(' ', width - step - extra), round(i / n * 100))
cat(text)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
#if (j == i){
#  next
#}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
}
library(svMisc)
install.packages("svMisc")
library(svMisc)
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
#if (j == i){
#  next
#}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
}
results_c_decay_score
## Check new genes found modules average score
old_mod_genes = which(class_res_old$gene_class[,2]=="M")
old_mod_genes
## Check old module genes average decay score
value_old = 0
counter = 0
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
value_old = value_old + results_c_decay_score[i]
counter = counter + 1
}
}
value_old
results_c_decay_score[1]
## Check old module genes average decay score
value_old = 0
counter = 0
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
print(value_old)
value_old = value_old + results_c_decay_score[i]
counter = counter + 1
}
}
results_c_decay_score
results_c_decay_score[925]
results_c_decay_score[925] != Inf
## Check old module genes average decay score
value_old = 0
counter = 0
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
print(value_old)
if (results_c_decay_score != Inf){
value_old = value_old + results_c_decay_score[i]
counter = counter + 1
}
}
}
## Check old module genes average decay score
value_old = 0
counter = 0
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
print(value_old)
if (results_c_decay_score[i] != Inf){
value_old = value_old + results_c_decay_score[i]
counter = counter + 1
}
}
}
results_c_decay_score
gs_results_all[61,]
gs_results_all[49,]
cor(gs_results_all$p.Decay, results_c_decay_score)
gs_results_all$p.Decay
results_c_decay_score
len(which(results_c_decay_score!=Inf))
length(which(results_c_decay_score!=Inf))
cor(X0_gs_adjusted[,2], results_c_decay_score)
X0_gs_adjusted[,2]
length(X0_gs_adjusted[,2])
length(results_c_decay_score)
cor(X0_gs_adjusted[,2], results_c_decay_score)
## initialize empty vector
results_c_decay_score = rep(0,nrow(ge_dist))
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
if (j == i){
next
}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
}
results_c_decay_score
cor(X0_gs_adjusted[,2], results_c_decay_score)
X0_gs_adjusted[,2]
## Get list of all new nodes classification
new_class = class_res_new$gene_class[,2]
new_module= rep(0,nrow(ge_dist))
## initialize empty vector
results_c_decay_score = rep(0,nrow(ge_dist))
new_module = rep(0,nrow(ge_dist))
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
##progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
g_new_class = new_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
if (j == i){
next
}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
## Not old module - check if new, if yes put 1 in the vector
else{
new_module[i] = 1
}
}
new_module
## initialize empty vector
results_c_decay_score = rep(0,nrow(ge_dist))
new_module = rep(0,nrow(ge_dist))
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
##progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
g_new_class = new_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
if (j == i){
next
}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
## Not old module - check if new, if yes put 1 in the vector
else{
if (g_new_class == "M"){
new_module[i] = 1
}
}
}
new_module
which(new_module==1)
length(which(new_module==1))
results_ge_mND
shift_sm <- table(mND = class_res_old$gene_class[,1], GS_adjusted_mND = class_res_new$gene_class[,1])
shift_sm
shift_ge <- table(mND = class_res_old$gene_class[,2], GS_adjusted_mND = class_res_new$gene_class[,2])
shift_ge
length(which(class_res_new$gene_class[,2]=="M"))
length(which(class_res_old$gene_class[,2]=="M"))
length(which(class_res_new$gene_class[,2]=="M")) - length(which(class_res_old$gene_class[,2]=="M"))
## initialize empty vector
results_c_decay_score = rep(0,nrow(ge_dist))
new_module = rep(0,nrow(ge_dist))
## Now start the strategy:
## For every gene
for(i in seq(1,nrow(gs_results_all))){
## Progress
## install.packages("svMisc")
## library(svMisc)
##progress(i)
## ----
gene = gs_results_all[i,]
g_id = gene$gene.id
g_rd = gene$radius
g_old_class = old_class[g_id]
g_new_class = new_class[g_id]
## Get the measure of the module node
## we choose measyre as -log_10_pvalue
## Other choice is original GE
measure = X0_gs_adjusted[i,2]
##print(measure)
## If the gene is an old module
if(g_old_class == "M"){
## Traverse other genes in the surrounding radius
## and update their cumulative_decay_score
for(j in seq(1, nrow(ge_dist))){
if (j == i){
next
}
## Get distance between the two nodes
g_dist = ge_dist[i,j]
if (g_dist <= g_rd){
## Update cumulative score of gene_j
results_c_decay_score[j] = as.numeric(results_c_decay_score[j]) + measure/g_dist
}
}
}
## Not old module - check if new, if yes put 1 in the vector
else{
if (g_new_class == "M"){
new_module[i] = 1
}
}
}
## We have 69 new modules - validate this
length(which(new_module==1))
length(which(class_res_new$gene_class[,2]=="M")) - length(which(class_res_old$gene_class[,2]=="M"))
## ?? Whats going on here?
length(which(class_res_new$gene_class[,2]=="M"))
length(which(class_res_old$gene_class[,2]=="M"))
## How many not in old but in new
which(class_res_new$gene_class[,2]!="M" & class_res_old[,2]=="M")
## How many not in old but in new
which(class_res_new$gene_class[,2]!="M" && class_res_old[,2]=="M")
## How many not in old but in new
which(class_res_old$gene_class[,2]!="M")
## How many not in old but in new
class_res_old$gene_class[,2]!="M"
## How many not in old but in new
class_res_old$gene_class[,2]!="M" && class_res_old[,2]=="M"
## How many not in old but in new
class_res_old$gene_class[,2]!="M" && class_res_old$gene_class[,2]=="M"
## How many not in old but in new
class_res_old$gene_class[,2]!="M" & class_res_old$gene_class[,2]=="M"
## How many not in old but in new
which(class_res_old$gene_class[,2]!="M" & class_res_old$gene_class[,2]=="M")
## How many not in old but in new
which(class_res_old$gene_class[,2]!="M" & class_res_new$gene_class[,2]=="M")
## How many not in old but in new
length(which(class_res_old$gene_class[,2]!="M" & class_res_new$gene_class[,2]=="M"))
## How many modules are in new but are not in old in old but they are in new
length(which(class_res_new$gene_class[,2]=="M" && class_res_old$gene_class[,2]!="M"))
class_res_new$gene_class[,2] == "M"
class_res_new$occ_labels
rownames(class_res_new)
names(class_res_new)
names(class_res_new$gene_class)
rownames(class_res_new$gene_class)
## Get md genes in new
rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
## Get md genes in new
new_mdg = rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
## Get md genes in new
new_mdg = rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
old_mdg = rownames(class_res_old$gene_class)[class_res_old$gene_class[,2] == "M"]
old_mdg
length(old_mdg)
length(new_mdg)
## How many modules are in new but are not in old in old but they are in new
length(which(class_res_new$gene_class[,2]=="M"))
## How many modules are in new but are not in old in old but they are in new
length(which(class_res_old$gene_class[,2]!="M"))
length(which(class_res_new$gene_class[,2]=="M"))
## How many modules are in new but are not in old in old but they are in new
length(which(class_res_old$gene_class[,2]=="M"))
length(which(class_res_new$gene_class[,2]=="M"))
## Get md genes in new
new_mdg = rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
old_mdg = rownames(class_res_old$gene_class)[class_res_old$gene_class[,2] == "M"]
which(new_mdg %in% old_mdg)
length(which(new_mdg %in% old_mdg))
length(which(!(new_mdg %in% old_mdg)))
results_c_decay_score
rownames(X0_gs_adjusted)
distinct_mdg = new_mdg[which(!(new_mdg %in% old_mdg))]
length(distinct_mdg)
cor(X0_gs_adjusted[,2], results_c_decay_score[which(rownames(X0_gs_adjusted)%in%distinct_mdg)])
rownames(X0_gs_adjusted)%in%distinct_mdg
which(rownames(X0_gs_adjusted)%in%distinct_mdg)
## Indices of distinct mdg
dmdg_indices = which(rownames(X0_gs_adjusted)%in%distinct_mdg)
X0_gs_adjusted[,2][dmdg_indices]
results_c_decay_score[dmdg_indices]
## Indices of distinct mdg
dmdg_indices = which(rownames(X0_gs_adjusted)%in%distinct_mdg)
cor(X0_gs_adjusted[,2][dmdg_indices], results_c_decay_score[dmdg_indices])
results_c_decay_score[dmdg_indices]
average(results_c_decay_score[dmdg_indices])
mean(results_c_decay_score[dmdg_indices])
mean(results_c_decay_score[!dmdg_indices])
!dmdg_indices
mean(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])
mean(results_c_decay_score[dmdg_indices])
mean(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])
## We have 69 new modules - validate this
length(which(new_module==1))
## How many modules are in new but are not in old in old but they are in new
length(which(class_res_old$gene_class[,2]=="M"))
length(which(class_res_new$gene_class[,2]=="M"))
## Get md genes in new
new_mdg = rownames(class_res_new$gene_class)[class_res_new$gene_class[,2] == "M"]
old_mdg = rownames(class_res_old$gene_class)[class_res_old$gene_class[,2] == "M"]
length(which(new_mdg %in% old_mdg))
## True - we have 69 genes as new modules previously not as modules
length(which(!(new_mdg %in% old_mdg)))
distinct_mdg = new_mdg[which(!(new_mdg %in% old_mdg))]
## Indices of distinct mdg
dmdg_indices = which(rownames(X0_gs_adjusted)%in%distinct_mdg)
mean(results_c_decay_score[dmdg_indices])
mean(results_c_decay_score[which(!(rownames(X0_gs_adjusted)%in%distinct_mdg))])
##-------------------------
#Sanity check: L1 labels changed even more than layer 2... why?
sum(class_res_new$gene_class[,2] != class_res_old$gene_class[,2])
shift_sm <- table(mND = class_res_old$gene_class[,1], GS_adjusted_mND = class_res_new$gene_class[,1])
shift_sm
