mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
# Replacing missing values in the categorical variables
calculate_mode = function(x)
{
uniqx = unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes = which(autism$Class.ASD == "YES")
mode_no_ethnicity = calculate_mode(autism$ethnicity[class_no])
mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
# Replacing missing values in the categorical variables
calculate_mode = function(x)
{
uniqx = unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes = which(autism$Class.ASD == "YES")
mode_no_ethnicity = calculate_mode(autism$ethnicity[class_no])
mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
# Replacing missing values in "age"
indicies = which(is.na(autism$age))
class = autism$Class.ASD[indicies]
class
autism$age[indicies]=mean(autism$age[class_no],na.rm=TRUE)
# Replacing missing values in the categorical variables
calculate_mode = function(x)
{
uniqx = unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes = which(autism$Class.ASD == "YES")
mode_no_ethnicity = calculate_mode(autism$ethnicity[class_no])
mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
calculate_mode=function(x)
{
uniqx=unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes=which(data$`Class/ASD`=="YES")
mode_no_ethnicity=calculate_mode(data$ethnicity[class_no])
mode_yes_ethnicity=calculate_mode(data$ethnicity[class_yes])
mode_no_relation=calculate_mode(data$relation[class_no])
mode_yes_relation=calculate_mode(data$relation[class_yes])
na_ethnicity=which(is.na(data$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(data$`Class/ASD`[na_ethnicity[i]]=="NO")
data$ethnicity[na_ethnicity[i]]=mode_no_ethnicity
else
data$ethnicity[na_ethnicity[i]]=mode_yes_ethnicity
}
autism$Class.ASD[na_ethnicity[i]]
autism$Class.ASD[na_ethnicity[i]]
autism$Class.ASD[na_ethnicity[i]]
autism$Class.ASD[na_ethnicity[i]]
autism$Class.ASD[na_ethnicity[i]]
autism$Class.ASD[na_relation[i]
autism$Class.ASD[na_relation[i]
autism$Class.ASD[na_relation[i]
# Replacing missing values in the categorical variables
calculate_mode = function(x)
# Replacing missing values in the categorical variables
calculate_mode = function(x)
{
uniqx = unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes = which(autism$Class.ASD == "YES")
mode_no_ethnicity = calculate_mode(autism$ethnicity[class_no])
mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
# Replacing missing values in the categorical variables
calculate_mode = function(x)
{
uniqx = unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
class_yes = which(autism$Class.ASD == "YES")
mode_no_ethnicity = calculate_mode(autism$ethnicity[class_no])
mode_yes_ethnicity = calculate_mode(autism$ethnicity[class_yes])
mode_no_relation = calculate_mode(autism$relation[class_no])
mode_yes_relation = calculate_mode(autism$relation[class_yes])
na_ethnicity = which(is.na(autism$ethnicity))
for(i in 1:length(na_ethnicity))
{
if(autism$Class.ASD[na_ethnicity[i]] == "NO")
autism$ethnicity[na_ethnicity[i]] = mode_no_ethnicity
else
autism$ethnicity[na_ethnicity[i]] = mode_yes_ethnicity
}
knitr::opts_chunk$set(echo = TRUE)
boxplot(autism$result, col="light green")$out
age_outliers = boxplot(autism$age, col=" light green")$out
autism$age[age_outliers]
boxplot_weight = boxplot(autism$age ~ autism$Class.ASD, data = autism, xlab = 'class', ylab = 'age', col=c("pink","light blue"))
boxplot(autism$result, col="light green")$out
age_outliers = boxplot(autism$age, col=" light green")$out
boxplot(autism$age, col=" light green")$out
boxplot(autism$result, col="light green")$out
age_outliers = boxplot(autism$age, col=" light green")$out
autism$age[age_outliers]
boxplot_weight = boxplot(autism$age ~ autism$Class.ASD, data = autism, xlab = 'class', ylab = 'age', col=c("pink","light blue"))
cor(autism[,c(11,18)])
# Testing for normality
shapiro.test(autism$age)$p.value
shapiro.test(autism$result)$p.value
accuraciess=data.frame(matrix(ncol=0,nrow=1))
accuraciess$tree=tree_accuracies[1]
bootstrap1=function(tree_data, output, predictors, m, percent)
{
n=nrow(tree_data)
index=c(1:n)
validation_nb=floor(n-(n*percent/100))
bagging=c()
tables=list()
accuracies=c()
worst_gini=c()
for(j in 1:m)
{
validation=sample(n,validation_nb,replace=F)
train70=index[-validation]
train30=sample(train70,validation_nb,replace=T)
train=c(train70,train30)
bagging=randomForest(`Class/ASD`~., tree_data, subset=train, mtry=(ncol(tree_data)-1),importance =TRUE)
predictions=predict(bagging,newdata=tree_data[validation,])
tables[[j]]=table(predict=predictions, truth=output[validation])
accuracies[j]=(tables[[j]][1,1]+tables[[j]][2,2])/sum(tables[[j]])
worst_gini[j]=which.min(bagging$importance[,4])
}
l=list(bagging,tables,accuracies,worst_gini)
return(l)
}
variables=colnames(data[,-c(20)])
tree_data=data
tree_accuracies=c()
rm_subset=c()
for(i in c(1:18))
{
r=bootstrap1(tree_data,tree_data$`Class/ASD`,variables,100,70)
tree_accuracies[i]=mean(r[[3]])
print(r[[1]]$importance)
rm_subset=r[[4]][1]
cat("\nThe predictor removed is: ")
print(colnames(tree_data[rm_subset]))
cat("\n")
tree_data=tree_data[,-rm_subset]
}
bootstrap1 = function(tree_data, output, predictors, m, percent)
{
n = nrow(tree_data)
index = c(1:n)
validation_nb = floor(n - (n*percent/100))
bagging = c()
tables = list()
accuracies = c()
worst_gini = c()
for(j in 1:m)
{
validation = sample(n, validation_nb, replace=F)
train70 = index[-validation]
train30 = sample(train70, validation_nb, replace=T)
train = c(train70, train30)
bagging = randomForest(Class.ASD~., tree_data, subset = train,
mtry = (ncol(tree_data)-1), importance =TRUE)
predictions = predict(bagging, newdata = tree_data[validation,])
tables[[j]] = table(predict = predictions, truth = output[validation])
accuracies[j] = (tables[[j]][1,1] + tables[[j]][2,2]) / sum(tables[[j]])
worst_gini[j] = which.min(bagging$importance[,4])
}
l = list(bagging,tables,accuracies,worst_gini)
return(l)
}
variables = colnames(autism[,-c(20)])
tree_data = autism
tree_accuracies = c()
rm_subset = c()
for(i in c(1:18))
{
r = bootstrap1(tree_data, tree_data$Class.ASD, variables, 100, 70)
tree_accuracies[i] = mean(r[[3]])
print(r[[1]]$importance)
rm_subset = r[[4]][1]
cat("\nThe predictor removed is: ")
print(colnames(tree_data[rm_subset]))
cat("\n")
tree_data=tree_data[,-rm_subset]
}
library(ggplot2)
library(tree)
library(randomForest)
library(caret)
library(dplyr)
library(ggpubr)
library(plotly)
library(e1071)
library(recipes)
library(forcats)
library(ggplot2)
library(tree)
library(randomForest)
library(caret)
library(dplyr)
library(ggpubr)
library(plotly)
library(e1071)
library(recipes)
library(forcats)
bootstrap1 = function(tree_data, output, predictors, m, percent)
{
n = nrow(tree_data)
index = c(1:n)
validation_nb = floor(n - (n*percent/100))
bagging = c()
tables = list()
accuracies = c()
worst_gini = c()
for(j in 1:m)
{
validation = sample(n, validation_nb, replace=F)
train70 = index[-validation]
train30 = sample(train70, validation_nb, replace=T)
train = c(train70, train30)
bagging = randomForest(Class.ASD~., tree_data, subset = train,
mtry = (ncol(tree_data)-1), importance =TRUE)
predictions = predict(bagging, newdata = tree_data[validation,])
tables[[j]] = table(predict = predictions, truth = output[validation])
accuracies[j] = (tables[[j]][1,1] + tables[[j]][2,2]) / sum(tables[[j]])
worst_gini[j] = which.min(bagging$importance[,4])
}
l = list(bagging,tables,accuracies,worst_gini)
return(l)
}
variables = colnames(autism[,-c(20)])
tree_data = autism
tree_accuracies = c()
rm_subset = c()
for(i in c(1:18))
{
r = bootstrap1(tree_data, tree_data$Class.ASD, variables, 100, 70)
tree_accuracies[i] = mean(r[[3]])
print(r[[1]]$importance)
rm_subset = r[[4]][1]
cat("\nThe predictor removed is: ")
print(colnames(tree_data[rm_subset]))
cat("\n")
tree_data=tree_data[,-rm_subset]
}
install.packages("installr"); library(installr) # install+load installr
updateR()
install.packages("C:/Users/Frederick/Desktop/mND_v01.07/mND_0.1.7.tar.gz")
install.packages("C:/Users/Frederick/Desktop/mND_v01.07/mND_0.1.7.tar.gz",repos=NULL)
install.packages("C:/Users/Frederick/Desktop/mND_v01.07/mND_0.1.7.tar.gz", repos=NULL)
install.packages("C:\Users\Frederick\Desktop\mND_v01.07\mND_0.1.7.tar.gz", repos=NULL)
install.packages("C:/Users/Frederick/Desktop/mND_v01.07/mND_0.1.7.tar.gz", repos=NULL)
install.packages("mND")
library(mND)
library(mND)
require(TCGAbiolinks)
install.packages("TCGAbiolinks")
install.packages("TCGAbiolinks")
library(SummarizedExperiment)
install.packages("SummarizedExperiment")
mND_scores <- readRDS("C:/Users/Frederick/Desktop/mND_scores.rds")
mND_scores <- readRDS("C:/Users/Frederick/Desktop/mND_scores.rds")
## ==========================================================================
## Installing Libraries
## ==========================================================================
##
## Install Several Required packages:
install.packages(c("devtools", "gplots",
"ggplot2", "igraph",
"lattice", "knitr","rsample",
"RColorBrewer", "rmarkdown",
"stringr", "UpSetR", "vcfR",
"pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
## ==========================================================================
## Installing Libraries
## ==========================================================================
##
## Install Several Required packages:
install.packages(c("devtools", "gplots",
"ggplot2", "igraph",
"lattice", "knitr","rsample",
"RColorBrewer", "rmarkdown",
"stringr", "UpSetR", "vcfR",
"pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
## ---------------------------------------------------------------------------
## TCGAbiolinks package (from github):
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
## ---------------------------------------------------------------------------
## Install ISMA - For Integrative retrieval
## and analysis of Mutations
install.packages("isma/isma_0.1.4.tar.gz", repos=NULL)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("IRanges", "GenomicRanges", "GenomicFeatures",
"org.Hs.eg.db", "Rsamtools",
"SummarizedExperiment",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"TxDb.Hsapiens.UCSC.hg38.knownGene",
"VariantAnnotation"))
## ==========================================================================
## Installing Libraries
## ==========================================================================
##
## Install Several Required packages:
install.packages(c("devtools", "gplots",
"ggplot2", "igraph",
"lattice", "knitr","rsample",
"RColorBrewer", "rmarkdown",
"stringr", "UpSetR", "vcfR",
"pcaPP", "SciViews", "tidyverse"))
install.packages(c("devtools", "gplots", "ggplot2", "igraph", "lattice", "knitr", "rsample", "RColorBrewer", "rmarkdown", "stringr", "UpSetR", "vcfR", "pcaPP", "SciViews", "tidyverse"))
## ---------------------------------------------------------------------------
## TCGAbiolinks package (from github):
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
## ---------------------------------------------------------------------------
## Install ISMA - For Integrative retrieval
## and analysis of Mutations
install.packages("isma/isma_0.1.4.tar.gz", repos=NULL)
## ---------------------------------------------------------------------------
## Install mND - For Multi Network Diffusion
install.packages("mND/mND_0.1.7.tar.gz", repos = NULL)
## ---------------------------------------------------------------------------
## Get GeneSurrounder.R and calc_p.R from github and Source it
source("genesurrounder/GeneSurrounder.R")
## ---------------------------------------------------------------------------
## Get GeneSurrounder.R and calc_p.R from github and Source it
source("genesurrounder/GeneSurrounder.R")
source("genesurrounder/run_geneSurrounder.R")
source("mND/calc_p.R")
library(isma)
library(mND)
library(igraph)
library(limma)
library(pcaPP)
library(SciViews)
library(tidyverse)
## Now we are ready to start our analysis
data(X0)
data(A)
## Normalize the Adjacency Matrix
W <- normalize_adj_mat(A)
## Permute the Layers Matrix
X0_perm <- perm_X0(X0, r = 50, W, seed_n = 2)
## Perform Network Diffusion - Windows
#Xs <- ND(X0_perm, W)
#saveRDS(Xs, "Data/Xs.rds")
data(Xs)
## Get Indices of Adjacent Neighbours
ind_adj <- neighbour_index(W)
## Perform mND considering sets of 3-neighbors - Non-Windows
mND_score <- mND(Xs, ind_adj, k = 3, cores = 2)
## Perform mND considering sets of 3-neighbors - Windows
mND_score <- mND(Xs, ind_adj, k = 3)
mND_score <- signif_assess(mND_score)
vector1 <- results_c_decay_score[dmdg_indices]
data(A)
W <- normalize_adj_mat(A)
ind_adj <- neighbour_index(W)
data(X0)
data(Xs)
X0_gs_adjusted <- readRDS("Data/X0_gs_adjusted.rds")
library(isma)
library(mND)
library(limma)
library(igraph)
library(pcaPP)
library(SciViews)
library(tidyverse)
data(X0)
data(A)
## Normalize the Adjacency Matrix
W <- normalize_adj_mat(A)
sum(gs_new_results$time)/3600
## ==========================================================================
## Installing Libraries
## ==========================================================================
##
## Install Several Required packages:
install.packages(c("devtools", "gplots",
"ggplot2", "igraph",
"lattice", "knitr","rsample",
"RColorBrewer", "rmarkdown",
"stringr", "UpSetR", "vcfR",
"pcaPP", "SciViews", "tidyverse"))
## ---------------------------------------------------------------------------
## TCGAbiolinks package (from github):
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
## ---------------------------------------------------------------------------
## Bioconductor packages: (R >= 3.5)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("IRanges", "GenomicRanges", "GenomicFeatures",
"org.Hs.eg.db", "Rsamtools",
"SummarizedExperiment",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"TxDb.Hsapiens.UCSC.hg38.knownGene",
"VariantAnnotation"))
## ==========================================================================
## Installing Libraries
## ==========================================================================
##
## Install Several Required packages:
install.packages(c("devtools", "gplots",
"ggplot2", "igraph",
"lattice", "knitr","rsample",
"RColorBrewer", "rmarkdown",
"stringr", "UpSetR", "vcfR",
"pcaPP", "SciViews", "tidyverse"))
## ---------------------------------------------------------------------------
## TCGAbiolinks package (from github):
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
## ---------------------------------------------------------------------------
## Bioconductor packages: (R >= 3.5)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("IRanges", "GenomicRanges", "GenomicFeatures",
"org.Hs.eg.db", "Rsamtools",
"SummarizedExperiment",
"TxDb.Hsapiens.UCSC.hg19.knownGene",
"TxDb.Hsapiens.UCSC.hg38.knownGene",
"VariantAnnotation"))
ge_resampled <- data.frame(matrix(ncol = length(ge_filtered), nrow = 1000))
## Normalize the Adjacency Matrix
W <- normalize_adj_mat(A)
## Now we are ready to start our analysis
data(X0)
data(A)
## Normalize the Adjacency Matrix
W <- normalize_adj_mat(A)
#we obtain a p-value = 0.002163
var.test()?
##-------------------------
#Sanity check: L1 labels changed even more than layer 2... why?
sum(class_res_new$gene_class[,2] != class_res_old$gene_class[,2])
#we obtain a p-value = 0.002163
var.test()?
##-------------------------
#Sanity check: L1 labels changed even more than layer 2... why?
sum(class_res_new$gene_class[,2] != class_res_old$gene_class[,2])
#we obtain a p-value = 0.002163
?var.test()
setwd(“~/Desktop/Computational-Biology-Final”)
setwd("~/Desktop/Computational-Biology-Final")
setwd("~/Desktop/'Computational-Biology-Final'")
setwd("~\Desktop\'Computational-Biology-Final'")
setwd("~\Desktop\Computational-Biology-Final")
setwd("~/Desktop/Computational-Biology-Final")
pwd
pwd()
getwd
getwd()
setwd("C:/Users/Frederick//Desktop/Computational-Biology-Final")
setwd("C:/Users/Frederick/Desktop/Computational-Biology-Final")
getwd()
